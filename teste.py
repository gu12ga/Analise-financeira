import numpy as np
import matplotlib.pyplot as plt

# Supondo que 'tempo' e 'valores' são seus dados
tempo = np.array([1, 2, 3, 4, 5])
dados_json = [
    {"Date": "2023-01-02 00:00:00", "Open": 26.93000030517578, "High": 26.93000030517578, "Low": 26.059999465942383, "Close": 26.190000534057617, "Adj Close": 25.854326248168945, "Volume": 4085300}, {"Date": "2023-01-03 00:00:00", "Open": 26.110000610351562, "High": 26.31999969482422, "Low": 25.360000610351562, "Close": 25.549999237060547, "Adj Close": 25.22252655029297, "Volume": 7885800}, {"Date": "2023-01-04 00:00:00", "Open": 25.709999084472656, "High": 25.75, "Low": 25.299999237060547, "Close": 25.600000381469727, "Adj Close": 25.271886825561523, "Volume": 7421100}, {"Date": "2023-01-05 00:00:00", "Open": 25.600000381469727, "High": 25.84000015258789, "Low": 25.25, "Close": 25.68000030517578, "Adj Close": 25.350862503051758, "Volume": 10972500}, {"Date": "2023-01-06 00:00:00", "Open": 25.709999084472656, "High": 25.84000015258789, "Low": 25.479999542236328, "Close": 25.600000381469727, "Adj Close": 25.271886825561523, "Volume": 10558700}, {"Date": "2023-01-09 00:00:00", "Open": 25.450000762939453, "High": 26.360000610351562, "Low": 25.329999923706055, "Close": 25.950000762939453, "Adj Close": 25.617401123046875, "Volume": 6516400}, {"Date": "2023-01-10 00:00:00", "Open": 25.649999618530273, "High": 26.299999237060547, "Low": 25.530000686645508, "Close": 26.18000030517578, "Adj Close": 25.844453811645508, "Volume": 5014600}, {"Date": "2023-01-11 00:00:00", "Open": 26.280000686645508, "High": 27.489999771118164, "Low": 26.079999923706055, "Close": 27.360000610351562, "Adj Close": 27.00933074951172, "Volume": 6999400}, {"Date": "2023-01-12 00:00:00", "Open": 27.34000015258789, "High": 28.190000534057617, "Low": 27.239999771118164, "Close": 27.549999237060547, "Adj Close": 27.1968936920166, "Volume": 6843000}, {"Date": "2023-01-13 00:00:00", "Open": 27.3799991607666, "High": 27.399999618530273, "Low": 26.950000762939453, "Close": 27.079999923706055, "Adj Close": 26.73291778564453, "Volume": 5428600}, {"Date": "2023-01-16 00:00:00", "Open": 27.40999984741211, "High": 27.40999984741211, "Low": 26.649999618530273, "Close": 26.829999923706055, "Adj Close": 26.486122131347656, "Volume": 6636300}, {"Date": "2023-01-17 00:00:00", "Open": 26.670000076293945, "High": 26.989999771118164, "Low": 26.31999969482422, "Close": 26.81999969482422, "Adj Close": 26.47624969482422, "Volume": 9564200}, {"Date": "2023-01-18 00:00:00", "Open": 26.920000076293945, "High": 27.6299991607666, "Low": 26.809999465942383, "Close": 27.420000076293945, "Adj Close": 27.068559646606445, "Volume": 9039900}, {"Date": "2023-01-19 00:00:00", "Open": 27.149999618530273, "High": 27.639999389648438, "Low": 27.139999389648438, "Close": 27.389999389648438, "Adj Close": 27.038944244384766, "Volume": 5021300}, {"Date": "2023-01-20 00:00:00", "Open": 27.290000915527344, "High": 27.350000381469727, "Low": 26.809999465942383, "Close": 26.989999771118164, "Adj Close": 26.644071578979492, "Volume": 5080000}, {"Date": "2023-01-23 00:00:00", "Open": 26.979999542236328, "High": 27.350000381469727, "Low": 26.90999984741211, "Close": 26.989999771118164, "Adj Close": 26.644071578979492, "Volume": 3519900}, {"Date": "2023-01-24 00:00:00", "Open": 27.1200008392334, "High": 27.440000534057617, "Low": 26.829999923706055, "Close": 27.229999542236328, "Adj Close": 26.88099479675293, "Volume": 5779100}, {"Date": "2023-01-25 00:00:00", "Open": 27.15999984741211, "High": 27.889999389648438, "Low": 27.06999969482422, "Close": 27.8700008392334, "Adj Close": 27.512794494628906, "Volume": 4583500}, {"Date": "2023-01-26 00:00:00", "Open": 27.920000076293945, "High": 28.059999465942383, "Low": 27.729999542236328, "Close": 27.979999542236328, "Adj Close": 27.621381759643555, "Volume": 5303900}, {"Date": "2023-01-27 00:00:00", "Open": 27.899999618530273, "High": 28.149999618530273, "Low": 27.780000686645508, "Close": 27.790000915527344, "Adj Close": 27.433818817138672, "Volume": 4672300}, {"Date": "2023-01-30 00:00:00", "Open": 27.84000015258789, "High": 27.959999084472656, "Low": 27.239999771118164, "Close": 27.5, "Adj Close": 27.14753532409668, "Volume": 7972100}, {"Date": "2023-01-31 00:00:00", "Open": 27.559999465942383, "High": 28.149999618530273, "Low": 27.399999618530273, "Close": 28.020000457763672, "Adj Close": 27.660871505737305, "Volume": 7619300}
]
# Extrair apenas os valores de "Adj Close" para criar um array
valores = np.array([d["Adj Close"] for d in dados_json])
tempo = np.array(list(range(1, len(valores)+1)))
# Calculando a inclinação e interceptação
m, b = np.polyfit(tempo, valores, 1)

# Exibindo a inclinação
print("Inclinação:", m)

# Plotando a série temporal e a linha de regressão linear
plt.scatter(tempo, valores, label='Série Temporal')
plt.plot(tempo, m * tempo + b, color='red', label='Regressão Linear')
plt.xlabel('Tempo')
plt.ylabel('Valores')
plt.legend()
plt.show()

'''
def calcular_formula(coluna):
    return f'=((C{coluna} / 42) * 0.088235294) + ((G{coluna} / 38) * 0.079831933) + ((K{coluna} / 145) * 0.304621849) + ((O{coluna} / 95) * 0.199579832) + ((S{coluna} / 156) * 0.327731092)'

# Colunas de C6 até C47
for i in range(6, 48):
    resultado = calcular_formula(i)
    print(resultado)
'''